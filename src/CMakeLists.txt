PROJECT(imageSegmentation)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
INCLUDE(CheckCXXCompilerFlag)

CHECK_CXX_COMPILER_FLAG("-std=c++11" SUPPORTS_STD_CXX11)
# MESSAGE("SUPPORTS_STD_CXX11: ${SUPPORTS_STD_CXX11}")
IF(SUPPORTS_STD_CXX11)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --std=c++11")
ENDIF()

SET(CMAKE_PREFIX_PATH "/usr/local/Qt/5.4/gcc_64/lib/cmake/")
SET(CMAKE_AUTOUIC ON)
SET(CMAKE_AUTOMOC ON)
SET (CMAKE_POSITION_INDEPENDENT_CODE ON)

# MESSAGE("CMAKE_PREFIX_PATH =" ${CMAKE_PREFIX_PATH})
# MESSAGE("CMAKE_SYSTEM_PREFIX_PATH = " ${CMAKE_SYSTEM_PREFIX_PATH})
# MESSAGE("CMAKE_INCLUDE_PATH	= " ${CMAKE_INCLUDE_PATH})
# MESSAGE("CMAKE_LIBRARY_PATH = " ${CMAKE_LIBRARY_PATH})
# MESSAGE("CMAKE_PROGRAM_PATH = " ${CMAKE_PROGRAM_PATH})

FIND_PACKAGE(CUDA REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(Boost 1.57 REQUIRED program_options thread system filesystem)
FIND_PACKAGE(Qt5Widgets REQUIRED)
FIND_PACKAGE(Qt5Core REQUIRED)

# SET(MY_LIBS ${MY_LIBS} ${Boost_LIBRARIES} ${OpenCV_LIBS})
SET(MY_LIBS ${MY_LIBS} ${Boost_LIBRARIES} ${OpenCV_LIBS} ${Qt5Widgets_LIBRARIES} ${Qt5Core_LIBRARIES})

# SET(CMAKE_AUTOMOC ON)
# SET(CMAKE_INCLUDE_CURRENT_DIR ON)

INCLUDE_DIRECTORIES(/usr/local/cuda/include)
INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${Qt5Widgets_INCLUDE_DIRS} ${Qt5Core_INCLUDE_DIRS})

# GET_TARGET_PROPERTY(QtCore_location Qt5::Core LOCATION)
# MESSAGE ("test: " ${OpenCV_INCLUDE_DIRS} )
# MESSAGE ("MY_LIBS: " ${MY_LIBS} )
# MESSAGE ("OPENCV_LIBS: " ${OpenCV_LIBS} )
MESSAGE("Qt5Widgets_INCLUDE_DIRS = "${Qt5Widgets_INCLUDE_DIRS})
MESSAGE("Qt5Core_INCLUDE_DIRS = "${Qt5Core_INCLUDE_DIRS})

SET(MY_FOLDERS
  visualizer
  threading
  configuration
  utility
  qt
  )

FOREACH(dir ${MY_FOLDERS})
  ADD_SUBDIRECTORY(${dir})    # processa i CMakeLists.txt nelle directory
  INCLUDE_DIRECTORIES(${dir}) # per far trovare a cmake i file header
ENDFOREACH(dir)

#add_executable(main main.cpp)
# CUDA_ADD_EXECUTABLE(main main.cpp)

#ADD_EXECUTABLE(main main.cpp)

#TARGET_LINK_LIBRARIES(main ${MY_FOLDERS} ${MY_LIBS})

ADD_EXECUTABLE(VisualizerTest VisualizerTest.cpp)
TARGET_LINK_LIBRARIES(VisualizerTest ${MY_FOLDERS} ${MY_LIBS})

# ADD_EXECUTABLE(main main.cpp)
# TARGET_LINK_LIBRARIES(main ${MY_FOLDERS} ${MY_LIBS})

ADD_EXECUTABLE(main2 main2.cpp)
TARGET_LINK_LIBRARIES(main2 ${MY_FOLDERS} ${MY_LIBS})

ADD_EXECUTABLE(mainQt mainQt.cpp)
TARGET_LINK_LIBRARIES(mainQt ${MY_FOLDERS} ${MY_LIBS})